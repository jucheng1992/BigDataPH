}
a<-1:20
lapply(X=a,FUN=f1)
library(gbm)
train<- read.table("/Users/jucheng/Desktop/QUIZ2/hw2_adaboost_train.dat")
test<- read.table("/Users/jucheng/Desktop/QUIZ2/hw2_adaboost_test.dat")
rm()
rm(list=ls(all=TRUE))
library(gbm)
train<- read.table("/Users/jucheng/Desktop/QUIZ2/hw2_adaboost_train.dat")
test<- read.table("/Users/jucheng/Desktop/QUIZ2/hw2_adaboost_test.dat")
install.packages{'ada'}
install.packages('ada')
library(MASS)
head(train)
library(tree)
tree.g1=tree(V3∼.,train )
tree.g1=tree(V3~.,train )
summary(tree.g1)
as.factor(train$V3)
train$V3=as.factor(train$V3)
tree.g1=tree(V3~.,train )
summary(tree.g1)
tree.g1=rpart(V3~.,train, class )
library(rpart)
tree.g1=rpart(V3~.,train, class )
tree.g1=rpart(V3~.,train, method=class )
tree.g1=rpart(V3~.,data=train, method=class )
train<- read.table("/Users/jucheng/Desktop/QUIZ2/hw2_adaboost_train.dat")
test<- read.table("/Users/jucheng/Desktop/QUIZ2/hw2_adaboost_test.dat")
tree.g1=rpart(V3~.,data=train, method=class )
train<- read.table("/Users/jucheng/Desktop/QUIZ2/hw2_adaboost_train.dat")
head(train)
tree.g1=rpart(V3~V1+V2,data=train, method=class )
tree.g1=rpart(V3~V1+V2,data=train, method=‘class’ )
tree.g1=rpart(V3~V1+V2,data=train, method='class')
install.packages('adabag')
library(tree)
tree.g1=tree(V3~V1+V2,data=train, method='class')
summary(tree.ge)
summary(tree.g1)
train$V3=as.factor(train$V3)
tree.g1=tree(V3~V1+V2,data=train)
summary(tree.g1)
prune.g1=prune(tree.g1, best=2)
summary(prune.g1)
tree.g1=tree(V3~,data=train)
prune.g1=prune(tree.g1, best=2)
tree.g1=tree(V3~.,data=train)
prune.g1=prune(tree.g1, best=2)
###question 13, E_in in the adaboosting
summary(prune.g1)
boosting.g1=gbm(V3~.,data=train,distribution = 'bernoulli',interaction .depth=1)
boosting.g1=gbm(V3~.,data=train,distribution = 'bernoulli',interaction.depth=1)
train
library(MASS)
Boston
head(Boston)
train$V3=if(train$V3==1)
}
train$V3=(train$V3==1)
train$V3=as.factor(train$V3)
###question 12, E_in in the first stump
tree.g1=tree(V3~.,data=train)
prune.g1=prune(tree.g1, best=2)
summary(prune.g1)
###question 13, E_in in the adaboosting
boosting.g1=gbm(V3~.,data=train,distribution = 'bernoulli',interaction.depth=1)
View(train)
train$V3= as.numeric(train$V3)
###question 12, E_in in the first stump
tree.g1=tree(V3~.,data=train)
prune.g1=prune(tree.g1, best=2)
summary(prune.g1)
train$V3= as.factor(train$V3)
train$V3=as.numeric(train$V3)
boosting.g1=gbm(V3~.,data=train,distribution = 'bernoulli',interaction.depth=1)
View(train)
train<- read.table("/Users/jucheng/Desktop/QUIZ2/hw2_adaboost_train.dat")
View(train)
train<- read.table("/Users/jucheng/Desktop/QUIZ2/hw2_adaboost_train.dat")
test<- read.table("/Users/jucheng/Desktop/QUIZ2/hw2_adaboost_test.dat")
train$V3=(train$V3==1)
train<- read.table("/Users/jucheng/Desktop/QUIZ2/hw2_adaboost_train.dat")
test<- read.table("/Users/jucheng/Desktop/QUIZ2/hw2_adaboost_test.dat")
train$V3= as.factor(train$V3)
###question 12, E_in in the first stump
tree.g1=tree(V3~.,data=train)
prune.g1=prune(tree.g1, best=2)
summary(prune.g1)
0.25*sqrt(3)+0.75/sqrt(3)
0.3*sqrt(7/3)+0.7/sqrt(7/3)
tree.g1=tree(V3~.,data=train)
prune.g1=prune(tree.g1, best=2)
summary(prune.g1)
for(i in train$V3){
if(i==-1) i=0
}
View(train)
View(train)
library(adabag)
rpart.control(maxdepth=1)
boosting.g1=boosting(V3~.,data=train,boos=F,mfinal=300,control(maxdepth=1))
boosting.g1=boosting(V3~.,data=train,boos=F,mfinal=300,control=(maxdepth=1))
boosting.g1=boosting(V3~.,data=train,boos=F,mfinal=300,control=rpart.control(1)))
boosting.g1=boosting(V3~.,data=train,boos=F,mfinal=300,control=rpart.control(1))
summary(boosting.g1)
boosting.g1
boosting.g1$error
errorevol(boosting.g1)
errorevol(boosting.g1,newdata=train)
test$V3= as.factor(test$V3)
summary(prune.g1)
pred.g1=predict(prune.g1,data=test)
summary(pred.g1)
summary(pred.g1)
summary(prune.g1)
pred.g1
table(tree.pred ,V3)
table(pred.g1 ,V3)
pred.g1=predict(prune.g1,data=test,type='class')
table(pred.g1 ,V3)
summary(pred.g1)
pred.g1
sum(pred.g1!=test$V3)
pred.train=pred(prune.g1,data=train,type='class')
pred.train=predict(prune.g1,data=train,type='class')
sum(pred.train!=train$V3)
pred.g1=predict(prune.g1,data=test,type='class')
sum(pred.g1!=test$V3)
errorevol(boosting.g1,newdata=train)
sum(errorevol(boosting.g1,newdata=train))
errorevol(boosting.g1,newdata=train)
boosting.g1=boosting(V3~.,data=train,boos=F,mfinal=10,control=rpart.control(1))
errorevol(boosting.g1,newdata=train)
boosting.g1=boosting(V3~.,data=train,boos=F,mfinal=3,control=rpart.control(1))
boosting.g1
sum(boosting.g1.class!=train$V3)
sum(boosting.g1$class!=train$V3)
boosting.g1=boosting(V3~.,data=train,boos=F,mfinal=1,control=rpart.control(1))
sum(boosting.g1$class!=train$V3)
boosting.g1=boosting(V3~.,data=train,boos=F,mfinal=1,control=rpart.control(1))
sum(boosting.g1$class!=train$V3)
boosting.g1
sum(boosting.g1$prob!=train$V3)
sum(boosting.g1$prob!=train$V3)
boosting.g=boosting(V3~.,data=train,boos=F,mfinal=1,control=rpart.control(1))
boosting.pred=predict.boosting(boosting.g)
boosting.pred=predict.boosting(boosting.g,newdata=test)
boosting.pred$error
boosting.g=boosting(V3~.,data=train,boos=F,mfinal=1,control=rpart.control(1))
boosting.pred=predict.boosting(boosting.g,newdata=test)
boosting.pred$error
boosting.pred
boosting.g=boosting(V3~.,data=train,boos=F,mfinal=1,control=rpart.control(1))
boosting.pred=predict.boosting(boosting.g,newdata=test)
boosting.pred$error
46+83
boosting.g=boosting(V3~.,data=train,boos=F,mfinal=1,control=rpart.control(maxdepth=0))
boosting.g=boosting(V3~.,data=train,boos=F,mfinal=1,control=rpart.control(maxdepth=1))
boosting.pred=predict.boosting(boosting.g,newdata=test)
boosting.pred$error
boosting.pred=predict.boosting(boosting.g,newdata=train)
boosting.pred$error
pred.train=predict.boosting(boosting.g,newdata=train)
pred.train$error
pred.test$error
pred.test=predict.boosting(boosting.g,newdata=train)
pred.test$error
pred.test=predict.boosting(boosting.g,newdata=test)
pred.test$error
pred.train=predict(prune.g1,data=train,type='class')
sum(pred.train!=train$V3)
pred.g1=predict(prune.g1,data=test,type='class')
sum(pred.g1!=test$V3)
pred.g1$error
pred.g1
pred.g1
sum((pred.g1-test$V3)^2/4)
(pred.g1!=test$V3)
sum(pred.g1!=test$V3)
pred.train=predict.boosting(boosting.g,newdata=train)
pred.train$error
pred.test=predict.boosting(boosting.g,newdata=test)
pred.test$error
boosting.g=boosting(V3~.,data=train,boos=F,mfinal=300, control=rpart.control(maxdepth=1))
pred.test=predict.boosting(boosting.g,newdata=test)
pred.test$error
install.packages("CVST")
library(CVST)
pred.train=predict.boosting(boosting.g,newdata=train)
pred.train$error
pred.test=predict.boosting(boosting.g,newdata=test)
pred.test$error
ns = noisySine(100)
ns
2^31
boosting.g=boosting(V3~.,data=train,boos=F,mfinal=1, control=rpart.control(maxdepth=1))
pred.train=predict.boosting(boosting.g,newdata=train)
pred.train$error
pred.test=predict.boosting(boosting.g,newdata=test)
pred.test$error
boosting.g=boosting(V3~.,data=train,boos=F,mfinal=300
, control=rpart.control(maxdepth=1))
pred.train=predict.boosting(boosting.g,newdata=train)
pred.train$error
pred.test=predict.boosting(boosting.g,newdata=test)
pred.test$error
n=100
sqrt(n)
10^n
n^1.5
2^sqrt(log(n))
n^(5/3)
n=100
2^(2^n)
2^(n^2)
n^2*log(n)
n
n^(2*n)
n=10
2^(2^n)
2^(n^2)
n^2*log(n)
n
n^(2*n)
n^(2^n)
n=4
2^(2^n)
2^(n^2)
n^2*log(n)
n
n^(2^n)
n=5
2^(2^n)
2^(n^2)
n^2*log(n)
n
n^(2^n)
train<- read.table("https://d396qusza40orc.cloudfront.net/ntumltwo/hw2_data/hw2_adaboost_train.dat")
train<- read.table.url("https://d396qusza40orc.cloudfront.net/ntumltwo/hw2_data/hw2_adaboost_train.dat")
library(RCurl)
url.train<- getURL("https://raw.github.com/aronlindberg/latent_growth_classes/master/LGC_data.csv")
train<- read.table(url.train)
url.train<- getURL("https://raw.github.com/aronlindberg/latent_growth_classes/master/LGC_data.csv")
train<- read.table(url.train)
clear()
train<- read.csv(url.train)
90.95+91.07
10240*1024/64
N=10240*1024/64
B=128*1024/64
log(N/B)/log(B-1)
10240/128
2*N*2
655360*0.2/1000
655360/4*6
136*1024/64
136*1024/64*4
#Collatz conjecture
#If it is even, divided by 2. else, times 3 and plus 1. All numers will become one.
func <- function(x) {
n = 1
raw <- x
while (x > 1) {
x <- ifelse(x%%2==0,x/2,3*x+1)
n = n + 1
}
return(c(raw,n))
}
library(parallel)
# use system.time to calculate our time
system.time({
x <- 1:1e6
cl <- makeCluster(4)   #set number of cluster equals 4
results <- parLapply(cl,x,func) # parallel version of lapply
res.df <- do.call('rbind',results) # 整合结果
stopCluster(cl) # 关闭集群
})
# find the most iteration
res.df[which.max(res.df[,2]),1]
x <- 1:1e3
#Collatz conjecture
#If it is even, divided by 2. else, times 3 and plus 1. All numers will become one.
func <- function(x) {
n = 1
raw <- x
while (x > 1) {
x <- ifelse(x%%2==0,x/2,3*x+1)
n = n + 1
}
return(c(raw,n))
}
library(parallel)
# use system.time to calculate our time
system.time({
x <- 1:1e3
cl <- makeCluster(4)   #set number of cluster equals 4
results <- parLapply(cl,x,func) # parallel version of lapply
res.df <- do.call('rbind',results) # combine this result into total result
stopCluster(cl) # close cluster
})
# find the most iteration
res.df[which.max(res.df[,2]),1]
cl <- makeCluster(4)   #set number of cluster equals 4
cl <- makeCluster(4)   #set number of cluster equals 4
2/(1/2+1/6)
expand.grid(data,data)
data <- c(15, 34, 35, 36, 11, 17, 36, 15)
expand.grid(data,data)
expand.grid(data,data,data)
combination <- expand.grid(data,data,data)
samptotal <- combination$Var1 + combination$Var2 + combination$Var3
samptotal
unique(samptotal)
hist(samptotal)
data <- c(15, 34, 35, 36, 11, 17, 36, 15)
permutations(n=3,r=2,v=data,repeats.allowed=T)
install.packages('gtools')
#load library
library(gtools)
## input data
data <- c(15, 34, 35, 36, 11, 17, 36, 15)
permutations(n=3,r=2,v=data,repeats.allowed=T)
permutations(n=8,r=3,v=data,repeats.allowed=T)
permutations(n=8,r=3,v=data,repeats.allowed=F)
permutations(n=8,r=3,v=data,repeats.allowed=FALSE)
permutations(r=3,v=data,repeats.allowed=FALSE)
permutations(n =1 ,r=3,v=data,repeats.allowed=FALSE)
permutations(n =1000 ,r=3,v=data,repeats.allowed=FALSE)
permutations(n =10,r=3,v=data,repeats.allowed=FALSE)
permutations(n =8,r=3,v=data,repeats.allowed=FALSE)
combinations(8,3,data)
x <- c('red', 'blue', 'black')
#pick 2 balls from the urn with replacement
#get all permutations
permutations(n=3,r=2,v=x,repeats.allowed=T)
combinations(8,3,data)
data <- c('15', '34', '35', '36', '11', '17', '36', '15')
combinations(8,3,data)
length(data)
combinations(8,3,data)
combinations(7,3,data)
combinations(3,3,data)
combinations(4,3,data)
combinations(4,3,data,repeats.allowed = T)
combinations(8,3,data,repeats.allowed = T)
combinations(8,3,data,set = F, repeats.allowed = T)
permutations(8,3,data,set = F, repeats.allowed = T)
WithReplace <- permutations(8,3,data,set = F, repeats.allowed = T)
View(WithReplace)
View(WithReplace)
sampTotal <- sum(WithReplace$V1+WithReplace$V2+WithReplace$V3)
sampTotal <- sum(WithReplace$V1+WithReplace$V2+WithReplace$V3)
WithReplace[,1]
sampTotal <- sum(WithReplace[,1]+WithReplace[,2]+WithReplace[,3])
sampTotal <- WithReplace[,1]+WithReplace[,2]+WithReplace[,3]
WithReplace[,1]+WithReplace[,2]
WithReplace[1,1]+WithReplace[1,2]
WithReplace
WithReplace <- as.numeric(WithReplace)
sampTotal <- WithReplace[,1]+WithReplace[,2]+WithReplace[,3]
sampTotal <- WithReplace[,1]+WithReplace[,2]+WithReplace[,0]
dim(WithReplace)
WithReplace <- permutations(8,3,data,set = F, repeats.allowed = T)
sampTotal <- as.numeric(WithReplace[,1])+as.numeric(WithReplace[,2])+as.numeric(WithReplace[,3])
########### using gtools
#install if necessary
install.packages('gtools')
#load library
library(gtools)
## input data
data <- c(15, 34, 35, 36, 11, 17, 36, 15)
WithReplace <- permutations(8,3,data,set = F, repeats.allowed = T)
sampTotal <- as.numeric(WithReplace[,1])+as.numeric(WithReplace[,2])+as.numeric(WithReplace[,3])
install.packages("gtools")
View(WithReplace)
sampTotal
hist(sampTotal)
WithoutReplace <- permutations(8,3,data,set = F, repeats.allowed = F)
library(gtools)
WithoutReplace <- permutations(8,3,data,set = F, repeats.allowed = F)
sampTotal <- as.numeric(WithoutReplace[,1])+as.numeric(WithoutReplace[,2])+as.numeric(WithoutReplace[,3])
WithReplace <- permutations(8,3,data,set = F, repeats.allowed = T)
sampTotal1 <- as.numeric(WithReplace[,1])+as.numeric(WithReplace[,2])+as.numeric(WithReplace[,3])
hist(sampTotal)
## permutation withou replacement (here combination and permutation are same)
WithoutReplace <- permutations(8,3,data,set = F, repeats.allowed = F)
sampTotal2 <- as.numeric(WithoutReplace[,1])+as.numeric(WithoutReplace[,2])+as.numeric(WithoutReplace[,3])
hist(sampTotal2)
hist(sampTotal1)
## permutation withou replacement (here combination and permutation are same)
WithoutReplace <- permutations(8,3,data,set = F, repeats.allowed = F)
sampTotal2 <- as.numeric(WithoutReplace[,1])+as.numeric(WithoutReplace[,2])+as.numeric(WithoutReplace[,3])
hist(sampTotal2)
publication <- as.data.frame(cbind(RefereedPublications= 0:10, Freq= c(28,4,3,4,4,2,1,0,2,1,1))
)
extended <- as.vector(rep(publication$RefereedPublications,publication$Freq))
hist(extended)
hist(extended, breaks = c(0:10))
hist(extended, breaks = 0:10)
library(doParallel)
library(randomForest)
winedata<-read.csv2("winequality-white.csv", header = TRUE)
getwd()
set("/Users/jucheng/Desktop/BigDataPH/BigDataPH/BigDataPH/Parallel_R")
setwd("/Users/jucheng/Desktop/BigDataPH/BigDataPH/BigDataPH/Parallel_R")
winedata<-read.csv2("winequality-white.csv", header = TRUE)
head(winedata)
curr<-data.matrix(winedata)
cl <- makeCluster(4)
registerDoParallel(cl)
rf <- foreach(ntree=rep(250, 4),
.combine=combine,
.packages='randomForest') %dopar%
randomForest(as.factor(quality)~., data=curr, ntree=ntree)
stopCluster(cl)
})
rf
srf<-randomForest(as.factor(quality)~., curr, ntree=1000)
winedata<-read.csv2("winequality-white.csv", header = TRUE)
curr<-data.matrix(winedata)
dataSplit = function(data, k, random.seed = NULL) {
# Set seed to reproduce the same result
if (!is.null(random.seed))
set.seed(random.seed)
n = nrow(data)
m = n%/%k
index = 1:n
# Split into k folds
ans = vector(k, mode = "list")
for (i in 1:(k - 1)) {
ans[[i]] = sample(index, m)
# move index out of our candidate index set
index = setdiff(index, ans[[i]])
}
ans[[k]] = index
return(ans)
}
crossValidation = function(data, cv.index, i, formula.text) {
n = nrow(data)
# Use k_th fold as test set
test.ind = cv.index[[i]]
# Use the rest of data as training set
train.ind = setdiff(1:n, test.ind)
train.data = data[train.ind, ]
test.data = data[test.ind, ]
rp.model = randomForest(as.formula(formula.text), data = train.data,ntree=1000)
rp.model
}
cv.index = dataSplit(data = winedata, k = 5, random.seed = 128)
cv.index
k = 5
cv.model = vector(k, mode = "list")
for (i in 1:k) {
cv.model[[i]] = crossValidation(curr, cv.index, i, "as.factor(quality)~.")
}
cv.model
cl <- makeCluster(4)
registerDoParallel(cl)
cv.model <- foreach(i = 1:k, .packages = c("randomForest")) %dopar% {
crossValidation(curr, cv.index, i, "as.factor(quality)~.")
}
y <- foreach(i=1:4, .combine='cbind') %do% rnorm(5)
y
y <- foreach(i=1:4, .combine='rbind') %do% rnorm(5)
y
func <- function(x) {
n = 1
raw <- x
while (x > 1) {
x <- ifelse(x%%2==0,x/2,3*x+1)
n = n + 1
}
return(c(raw,n))
}
library(parallel)
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
x <- foreach(x=1:1000,.combine='rbind') %dopar% func(x)
stopCluster(cl)
psteps[which.max(psteps[,2]),]
psteps <- foreach(x=1:size,.combine='rbind') %dopar% func(x)
stopCluster(cl)
library(doParallel)
library(randomForest)
prf.time<-system.time({
cl <- makeCluster(4)
registerDoParallel(cl)
## each cluster, we set 2500 trees
rf <- foreach(ntree=rep(2500, 4),
.combine=combine,
.packages='randomForest') %dopar%
randomForest(Species~., data=iris, ntree=ntree)
stopCluster(cl)
})
prf.time
prf.time<-system.time({
cl <- makeCluster(4)
registerDoParallel(cl)
## each cluster, we set 2500 trees
rf <- foreach(ntree=rep(2500, 4),
.combine=combine,
.packages='randomForest') %dopar%
randomForest(Species~., data=iris, ntree=ntree)
stopCluster(cl)
})
srf.time<-system.time(
randomForest(Species~., data=iris, ntree=10000)
)
prf.time
